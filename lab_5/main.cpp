#include <vector>
#include <iostream>
#include "tsp.h"
#include <chrono>

#include <algorithm>

using namespace std;
using namespace std::chrono;

int main(int argc, char* argv[]) {
   Graph graph2{{0, 1, 2.0}, {0, 2, 4.0}, {0, 3, 1.0}, {0, 4, 2.5}, {0, 5, 3.2},
             {1, 2, 3.6}, {1, 3, 6.0}, {1, 4, 3.0}, {1, 5, 0.1},
             {2, 3, 7.0}, {2, 4, 5.0}, {2, 5, 9},
             {3, 4, 9.0}, {3, 5, 0.5},            
             {4, 5, 1.0}};
   Graph graph1 {{0, 1, 6.0}, {0, 2, 4.0}, {0, 3, 1.0},
             {1, 2, 3.5}, {1, 3, 2.0}, 
             {2, 3, 5.0}};
//    Graph graph3{{0, 1, 83}, {0, 2, 86}, {0, 3, 77}, {0, 4, 15}, {0, 5, 93}, {0, 6, 35}, {0, 7, 86}, {0, 8, 92}, {0, 9, 49}, {0, 10, 21}, {0, 11, 62}, {1, 0, 27}, {1, 2, 90}, {1, 3, 59}, {1, 4, 63}, {1, 5, 26}, {1, 6, 40}, {1, 7, 26}, {1, 8, 72}, {1, 9, 36}, {1, 10, 11}, {1, 11, 68}, {2, 0, 67}, {2, 1, 29}, {2, 3, 82}, {2, 4, 30}, {2, 5, 62}, {2, 6, 23}, {2, 7, 67}, {2, 8, 35}, {2, 9, 29}, {2, 10, 2}, {2, 11, 22}, {3, 0, 58}, {3, 1, 69}, {3, 2, 67}, {3, 4, 93}, {3, 5, 56}, {3, 6, 11}, {3, 7, 42}, {3, 8, 29}, {3, 9, 73}, {3, 10, 21}, {3, 11, 19}, {4, 0, 84}, {4, 1, 37}, {4, 2, 98}, {4, 3, 24}, {4, 5, 15}, {4, 6, 70}, {4, 7, 13}, {4, 8, 26}, {4, 9, 91}, {4, 10, 80}, {4, 11, 56}, {5, 0, 73}, {5, 1, 62}, {5, 2, 70}, {5, 3, 96}, {5, 4, 81}, {5, 6, 5}, {5, 7, 25}, {5, 8, 84}, {5, 9, 27}, {5, 10, 36}, {5, 11, 5}, {6, 0, 46}, {6, 1, 29}, {6, 2, 13}, {6, 3, 57}, {6, 4, 24}, {6, 5, 95}, {6, 7, 82}, {6, 8, 45}, {6, 9, 14}, {6, 10, 67}, {6, 11, 34}, {7, 0, 64}, {7, 1, 43}, {7, 2, 50}, {7, 3, 87}, {7, 4, 8}, {7, 5, 76}, {7, 6, 78}, {7, 8, 88}, {7, 9, 84}, {7, 10, 3}, {7, 11, 51}, {8, 0, 54}, {8, 1, 99}, {8, 2, 32}, {8, 3, 60}, {8, 4, 76}, {8, 5, 68}, {8, 6, 39}, {8, 7, 12}, {8, 9, 26}, {8, 10, 86}, {8, 11, 94}, {9, 0, 39}, {9, 1, 95}, {9, 2, 70}, {9, 3, 34}, {9, 4, 78}, {9, 5, 67}, {9, 6, 1}, {9, 7, 97}, {9, 8, 2}, {9, 10, 17}, {9, 11, 92}, {10, 0, 52}, {10, 1, 56}, {10, 2, 1}, {10, 3, 80}, {10, 4, 86}, {10, 5, 41}, {10, 6, 65}, {10, 7, 89}, {10, 8, 44}, {10, 9, 19}, {10, 11, 40}, {11, 0, 29}, {11, 1, 31}, {11, 2, 17}, {11, 3, 97}, {11, 4, 71}, {11, 5, 81}, {11, 6, 75}, {11, 7, 9}, {11, 8, 27}, {11, 9, 67}, {11, 10, 56}};
   Graph graph3{{0, 1, 83}, {0, 2, 86}, {0, 3, 77}, {0, 4, 15}, {0, 5, 93}, {0, 6, 35}, {0, 7, 86}, {0, 8, 92}, {0, 9, 49}, {1, 0, 21}, {1, 2, 62}, {1, 3, 27}, {1, 4, 90}, {1, 5, 59}, {1, 6, 63}, {1, 7, 26}, {1, 8, 40}, {1, 9, 26}, {2, 0, 72}, {2, 1, 36}, {2, 3, 11}, {2, 4, 68}, {2, 5, 67}, {2, 6, 29}, {2, 7, 82}, {2, 8, 30}, {2, 9, 62}, {3, 0, 23}, {3, 1, 67}, {3, 2, 35}, {3, 4, 29}, {3, 5, 2}, {3, 6, 22}, {3, 7, 58}, {3, 8, 69}, {3, 9, 67}, {4, 0, 93}, {4, 1, 56}, {4, 2, 11}, {4, 3, 42}, {4, 5, 29}, {4, 6, 73}, {4, 7, 21}, {4, 8, 19}, {4, 9, 84}, {5, 0, 37}, {5, 1, 98}, {5, 2, 24}, {5, 3, 15}, {5, 4, 70}, {5, 6, 13}, {5, 7, 26}, {5, 8, 91}, {5, 9, 80}, {6, 0, 56}, {6, 1, 73}, {6, 2, 62}, {6, 3, 70}, {6, 4, 96}, {6, 5, 81}, {6, 7, 5}, {6, 8, 25}, {6, 9, 84}, {7, 0, 27}, {7, 1, 36}, {7, 2, 5}, {7, 3, 46}, {7, 4, 29}, {7, 5, 13}, {7, 6, 57}, {7, 8, 24}, {7, 9, 95}, {8, 0, 82}, {8, 1, 45}, {8, 2, 14}, {8, 3, 67}, {8, 4, 34}, {8, 5, 64}, {8, 6, 43}, {8, 7, 50}, {8, 9, 87}, {9, 0, 8}, {9, 1, 76}, {9, 2, 78}, {9, 3, 88}, {9, 4, 84}, {9, 5, 3}, {9, 6, 51}, {9, 7, 54}, {9, 8, 99}};

//    for (int i=0; i<10; i++){
//         for (int j = 0; j<10; j++){
//             if (i != j) cout << "{" << i << ", " << j << ", " << rand()%100 << "}, ";
//         }
//     }
   auto t_1 = steady_clock::now();
   vector<int> t;
   auto t_2 = steady_clock::now();

   t_1 = steady_clock::now();
   t = tsp(graph1);
   t_2 = steady_clock::now();
   cout << "Time: " << duration<double>(t_2 - t_1).count() << endl; 
   cout << "Weight: " << Length(graph1, t) << endl;

   t_1 = steady_clock::now();
   t = tsp(graph2);
   t_2 = steady_clock::now();
   cout << "Time: " << duration<double>(t_2 - t_1).count() << endl; 
   cout << "Weight: " << Length(graph2, t) << endl;

   t_1 = steady_clock::now();
   t = tsp(graph3);
   t_2 = steady_clock::now();
   cout << "Time: " << duration<double>(t_2 - t_1).count() << endl; 
   cout << "Weight: " << Length(graph3, t) << endl;
}
